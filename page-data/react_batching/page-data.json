{"componentChunkName":"component---src-templates-blog-post-js","path":"/react_batching/","result":{"data":{"site":{"siteMetadata":{"title":"neekoblog"}},"markdownRemark":{"id":"4b26059f-1acc-54aa-803a-a8a0c8968e52","excerpt":"📚 Intro setState를 호출하면 React는 즉시 리렌더링을 수행하지 않고 해당 업데이트를 큐에 등록한 후 이벤트 핸들러의 실행이 끝날 때까지 기다린다.\n\n이 부분과 batchingUpdate이랑 연관이 있다고 하는데 \nbatchingUpdate이 무엇인지 그리고 React…","html":"<h3>📚 Intro</h3>\n<p>setState를 호출하면 React는 즉시 리렌더링을 수행하지 않고 해당 업데이트를 큐에 등록한 후 이벤트 핸들러의 실행이 끝날 때까지 기다린다.\n<br/>\n이 부분과 batchingUpdate이랑 연관이 있다고 하는데 <br/>\nbatchingUpdate이 무엇인지 그리고 React 18에 새롭게 추가된 것이 무엇인지 무지상태에서 파해쳐보기로 한다.</p>\n<hr>\n<h3>Batching</h3>\n<p>state는 각 랜더링마다 고정되어있는데 만약 state가 여러개 바뀌면 어떻게 될까?<br/>\nsetNumber()와 setName()이런 함수가 여러번 나뉘어서 실행되나?<br/></p>\n<p>아니다.<br/>\n불필요한 랜더링을 방지하기 위해 이벤트 핸들러의 모든 코드가 실행될 때까지 기다린다.<br/>\n즉, state의 업데이트 작업을 모아 일괄 처리하는 방식을 Batching이라고 한다.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">increaseCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 아래 작업들은 일괄작업으로 처리된다.</span>\n    <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev</span> <span class=\"token operator\">=></span> prev <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev</span> <span class=\"token operator\">=></span> prev <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev</span> <span class=\"token operator\">=></span> prev <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>increaseCount<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">+1</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Count : </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Counter</code></pre></div>\n<p>React는 여러 번 호출된 setState를 내부적으로 큐에 모아두고 하나의 일괄 작업(batch)으로 처리해 단 한 번만 리렌더링을 발생시킨다.</p>\n<hr>\n<h3>React 18에 추가된 Automatic Batching</h3>","frontmatter":{"title":"react의 batchingUpdate","date":"May 27, 2025","description":"여러 상태 업데이트를 하나의 리렌더링으로 그룹화하는 최적화 기법"}},"previous":{"fields":{"slug":"/webserver/"},"frontmatter":{"title":"웹서버"}},"next":null},"pageContext":{"id":"4b26059f-1acc-54aa-803a-a8a0c8968e52","previousPostId":"fb85b0c2-668e-5faa-a7cf-93092377ecdf","nextPostId":null}},"staticQueryHashes":["1469588348","2841359383"],"slicesMap":{}}