{"componentChunkName":"component---src-templates-blog-post-js","path":"/prototype/","result":{"data":{"site":{"siteMetadata":{"title":"neekoblog"}},"markdownRemark":{"id":"f13e515d-94b7-5fc1-93bd-49516fa60002","excerpt":"개요 Javascript는 prototype 기반 OOP 언어라고 한다.\nJavascript를 계속 보니까 이제 실제로 어떤걸 가지고 prototype과 chain을 이야기 하는 것인지 조금은 이해했지만\n더 자세히 살펴볼 필요가 있을 것 같아 해당 글을 작성한다. Prototype…","html":"<h3>개요</h3>\n<p>Javascript는 prototype 기반 OOP 언어라고 한다.\nJavascript를 계속 보니까 이제 실제로 어떤걸 가지고 prototype과 chain을 이야기 하는 것인지 조금은 이해했지만\n더 자세히 살펴볼 필요가 있을 것 같아 해당 글을 작성한다.</p>\n<h3>Prototype 기반 OOP</h3>\n<blockquote>\n<p>prototype은 Object들이 서로 속성을 공유하기 위해 사용하는 연결고리다.</p>\n</blockquote>\n<p>보통은 class로 상속모델을 사용하는데 javascript는 프로토타입 상속모델을 사용한다.<br/>\n객체가 상위 프로토타입 메소드와 속성을 상속받을 수 있는데 상위의 상위 프로토타입도 상속을 받을 수 있게 하는 것을 <b>Prototype Chain</b>이라고도 한다.<br/>\n즉, 상속되는 속성과 메소드는 생성자의 prototype안에 정의되어있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">.</span>__proto__</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span><span class=\"token literal-property property\">__defineGetter__</span><span class=\"token operator\">:</span> ƒ<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">__defineSetter__</span><span class=\"token operator\">:</span> ƒ<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">hasOwnProperty</span><span class=\"token operator\">:</span> ƒ<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">__lookupGetter__</span><span class=\"token operator\">:</span> ƒ<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">__lookupSetter__</span><span class=\"token operator\">:</span> ƒ<span class=\"token punctuation\">,</span> …<span class=\"token punctuation\">}</span>\n<span class=\"token literal-property property\">constructor</span><span class=\"token operator\">:</span>ƒ <span class=\"token function\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token literal-property property\">hasOwnProperty</span><span class=\"token operator\">:</span>ƒ <span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token literal-property property\">isPrototypeOf</span><span class=\"token operator\">:</span>ƒ <span class=\"token function\">isPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token literal-property property\">propertyIsEnumerable</span><span class=\"token operator\">:</span>ƒ <span class=\"token function\">propertyIsEnumerable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token literal-property property\">toLocaleString</span><span class=\"token operator\">:</span>ƒ <span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token literal-property property\">toString</span><span class=\"token operator\">:</span>ƒ <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token literal-property property\">valueOf</span><span class=\"token operator\">:</span>ƒ <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token literal-property property\">__defineGetter__</span><span class=\"token operator\">:</span>ƒ <span class=\"token function\">__defineGetter__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<h3>Prototype이란?</h3>\n<p>prototype 객체는 생성자 함수로 생성된 객체들이 공통으로 사용할 수 있는 프로퍼티를 제공하는 역할을 합니다.\n일반 함수가 생성될 때 prototype 프로퍼티가 자동으로 함께 만들어집니다.</p>\n<h4>🔍 [[Prototype]] 내부 슬롯 vs prototype 프로퍼티</h4>\n<p>JavaScript에서는 두 가지 다른 개념을 구분해야 합니다</p>\n<p><strong><code class=\"language-text\">[[Prototype]]</code> 내부 슬롯</strong></p>\n<ul>\n<li>모든 객체가 가지고 있는 내부 슬롯</li>\n<li>상속을 구현하는데 사용되는 참조값</li>\n<li><code class=\"language-text\">__proto__</code> 접근자나 <code class=\"language-text\">Object.getPrototypeOf()</code>로 접근 가능</li>\n<li>객체의 <code class=\"language-text\">[[Prototype]]</code>은 상속 체인에서 상위에 있는 프로토타입 객체를 가리킵니다</li>\n<li>함수의 경우에는 <code class=\"language-text\">Function.prototype</code> 객체를 가리킵니다</li>\n<li>인스턴스의 경우에는 생성자 함수의 <code class=\"language-text\">prototype</code> 프로퍼티가 가리키는 객체를 가리킵니다</li>\n</ul>\n<p><strong><code class=\"language-text\">prototype</code> 프로퍼티</strong></p>\n<ul>\n<li>함수 객체만 가지고 있는 일반 프로퍼티</li>\n<li>생성자 함수로 인스턴스를 만들 때 인스턴스의 <code class=\"language-text\">[[Prototype]]</code>이 가리킬 객체</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"early\"</span> <span class=\"token comment\">// 생성자 함수의 프로퍼티 설정</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> puppy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"access\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Dog 생성자로 인스턴스 생성</span>\n\n<span class=\"token comment\">// prototype 프로퍼티 (함수만 소유)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dog</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 👉 Dog는 함수이므로 prototype 프로퍼티 존재 ✅</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>puppy<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 👉 puppy는 인스턴스이므로 prototype 프로퍼티 없음 ❌ (undefined)</span>\n\n<span class=\"token comment\">// [[Prototype]] 내부 슬롯 (모든 객체가 소유)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Dog<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 👉 Function.prototype</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>puppy<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 👉 Dog.prototype (생성자의 prototype 프로퍼티와 연결)</span></code></pre></div>\n<p>Prototype값에 접근하기 위해서 <code class=\"language-text\">Object.prototype.__proto__</code>를 사용하면 된다.\n이렇게 하면 내부에서 Object.getPrototypeOf()가 호출된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 빈 객체 생성</span>\na<span class=\"token punctuation\">.</span>__proto__ <span class=\"token comment\">// 객체의 프로토타입에 접근 (Object.prototype과 동일)</span></code></pre></div>\n<h3>constructor 프로퍼티</h3>\n<p>프로토타입 객체(.prototype)는 constructor 프로퍼티를 갖는다.\n이 constructor프로퍼티는 객체의 입장에서 자신을 생성한 객체를 가리킨다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"></code></pre></div>","frontmatter":{"title":"Prototype","date":"June 16, 2025","description":"Prototype, Prototype Chain..."}},"previous":{"fields":{"slug":"/react_batching/"},"frontmatter":{"title":"react의 batchingUpdate"}},"next":null},"pageContext":{"id":"f13e515d-94b7-5fc1-93bd-49516fa60002","previousPostId":"4b26059f-1acc-54aa-803a-a8a0c8968e52","nextPostId":null}},"staticQueryHashes":["1469588348","2841359383"],"slicesMap":{}}