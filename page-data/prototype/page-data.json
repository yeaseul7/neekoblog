{"componentChunkName":"component---src-templates-blog-post-js","path":"/prototype/","result":{"data":{"site":{"siteMetadata":{"title":"neekoblog"}},"markdownRemark":{"id":"f13e515d-94b7-5fc1-93bd-49516fa60002","excerpt":"개요 Javascript는 prototype 기반 OOP 언어라고 한다.\nJavascript를 계속 보니까 이제 실제로 어떤걸 가지고 prototype과 chain을 이야기 하는 것인지 조금은 이해했지만\n더 자세히 살펴볼 필요가 있을 것 같아 해당 글을 작성한다. Prototype…","html":"<h3>개요</h3>\n<p>Javascript는 prototype 기반 OOP 언어라고 한다.\nJavascript를 계속 보니까 이제 실제로 어떤걸 가지고 prototype과 chain을 이야기 하는 것인지 조금은 이해했지만\n더 자세히 살펴볼 필요가 있을 것 같아 해당 글을 작성한다.</p>\n<h3>Prototype 기반 OOP</h3>\n<blockquote>\n<p>prototype은 Object들이 서로 속성을 공유하기 위해 사용하는 연결고리다.</p>\n</blockquote>\n<p>보통은 class로 상속모델을 사용하는데 javascript는 프로토타입 상속모델을 사용한다.<br/>\n객체가 상위 프로토타입 메소드와 속성을 상속받을 수 있는데 상위의 상위 프로토타입도 상속을 받을 수 있게 하는 것을 <b>Prototype Chain</b>이라고도 한다.<br/>\n즉, 상속되는 속성과 메소드는 생성자의 prototype안에 정의되어있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javasscript\"><pre class=\"language-javasscript\"><code class=\"language-javasscript\">let a = {}\nconsole.log(a.__proto__)\n{__defineGetter__: ƒ, __defineSetter__: ƒ, hasOwnProperty: ƒ, __lookupGetter__: ƒ, __lookupSetter__: ƒ, …}\nconstructor:ƒ Object()\nhasOwnProperty:ƒ hasOwnProperty()\nisPrototypeOf:ƒ isPrototypeOf()\npropertyIsEnumerable:ƒ propertyIsEnumerable()\ntoLocaleString:ƒ toLocaleString()\ntoString:ƒ toString()\nvalueOf:ƒ valueOf()\n__defineGetter__:ƒ __defineGetter__()\n...</code></pre></div>","frontmatter":{"title":"Prototype","date":"June 16, 2025","description":"Prototype, Prototype Chain..."}},"previous":{"fields":{"slug":"/react_batching/"},"frontmatter":{"title":"react의 batchingUpdate"}},"next":null},"pageContext":{"id":"f13e515d-94b7-5fc1-93bd-49516fa60002","previousPostId":"4b26059f-1acc-54aa-803a-a8a0c8968e52","nextPostId":null}},"staticQueryHashes":["1469588348","2841359383"],"slicesMap":{}}