{"componentChunkName":"component---src-templates-blog-post-js","path":"/higherOrder_function/","result":{"data":{"site":{"siteMetadata":{"title":"neekoblog"}},"markdownRemark":{"id":"40ae2dcd-4a7c-50d5-b074-c4b48c5f3d81","excerpt":"Javascript…","html":"<blockquote>\n<p>Javascript는 함수형 프로그래밍이다.</p>\n</blockquote>\n<h3>함수형 프로그래밍이란?</h3>\n<p>단순하게 프로그래밍 패러다임 중 하나로, 불변성을 강조하며 프로그램의 상태 변경을 최소화 하는 것을 목표로 한 것이다.<br/>\n개념 자체는 수학적 함수의 개념에 기반을 두고 있다.<br/>\n불변성과 상태 변경을 최소화 한다는 것은 예측 가능성을 더 높여주는 것이라고 볼 수 있다.</p>\n<h3>Javascript에서 함수</h3>\n<p>javascript에서 <code class=\"language-text\">함수는 일급 객체</code> 이다.<br/>\n일반 객체와는 다르다.<br/>\n<strong>일반 객체는 호출할 수 없지만 함수는 호출할 수 있다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Dog\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token function\">obj</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ❌ TypeError: obj is not a function</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello!\"</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ✅ \"Hello!\"</span></code></pre></div>\n<h4>일급 객체랑 일반 객체는 다른건가?</h4>\n<blockquote>\n<p>다르다.</p>\n</blockquote>\n<p>일급 객체의 특징을 일반 객체는 모두 포함하고 있지 않다.<br/>\n관계를 표현하면 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">일반 <span class=\"token function\">객체</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">)</span> ⊆ 일급 객체 ⊆ <span class=\"token function\">함수</span><span class=\"token punctuation\">(</span>Function<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>일급객체</h3>\n<ol>\n<li>\n<p>무명의 리터럴로 생성할 수 있다. (런타임에 생성이 가능하다.)<br/>\n익명 함수로 생성이 가능하다는 의미이다. <br/>\n익명 함수의 형태를 보면 런타임(할당 단계)에 생성되는 변수에 저장 하는 형태이기 때문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ 5</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>`\n</code></pre></div>\n</li>\n<li>\n<p>변수나 자료구조(배열, 객체)에 저장할 수 있다.\n변수에 저장되는 형태는 위의 예시와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increase</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token operator\">++</span>num<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">decrease</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token operator\">--</span>num<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> predicates <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> increase<span class=\"token punctuation\">,</span> decrease <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token template-punctuation string\">`</span></span>`\n</code></pre></div>\n</li>\n<li>\n<p>함수의 매개변수에 전달할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">plusFunc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">increaseFunc</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">increaseFunc</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 위에서 predicates객체에 저장된 함수인 'increase'를 새로 생성한 plusFunc의 매개변수에 전달했다.</span>\n<span class=\"token keyword\">const</span> calculated <span class=\"token operator\">=</span> <span class=\"token function\">plusFunc</span><span class=\"token punctuation\">(</span>predicates<span class=\"token punctuation\">.</span>increase<span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>calculated<span class=\"token punctuation\">)</span> <span class=\"token comment\">// ✅ 1</span></code></pre></div>\n</li>\n<li>\n<p>함수의 반환값으로 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">applyOperation</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">operation<span class=\"token punctuation\">,</span> num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">operation</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">applyOperation</span><span class=\"token punctuation\">(</span>predicates<span class=\"token punctuation\">.</span>increase<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ✅ 6</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">applyOperation</span><span class=\"token punctuation\">(</span>predicates<span class=\"token punctuation\">.</span>decrease<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ✅ 4</span></code></pre></div>\n<p>⚠️ 실제로 위의 코드에서 <code class=\"language-text\">applyOperation가 api를 사용해서 return을 얻을 경우</code> Promise 객체를 반환하여 예상하지 못한 동작을 할 수 있다.</p>\n<p>그래서 이럴 경우 <code class=\"language-text\">async/await</code> 를 활용해서 Promise가 해결된 값을 반환하도록 수정해야한다.</p>\n</li>\n</ol>\n<h3>함수의 프로토타입 간략하게 보기</h3>\n<p>일반 객체는 기본적으로 프로퍼티를 가질 수 있다.<br/>\n따라서 객체의 상속체계에 대한 정보를 가진 <code class=\"language-text\">__proto__</code> 가 존재하는데,<br/>\n함수는 Object.prototype을 상속받는게 아닌 Function.prototype을 상속받는다.</p>\n<p>추가로 <code class=\"language-text\">__proto__</code> 와 prototype의 차이에 대해 이해할 필요가 있다.</p>\n<h3>고차 함수(Higher order Function)</h3>\n<blockquote>\n<p>함수를 인자로 전달 받거나 함수를 결과로 반환하는 함수이다.</p>\n</blockquote>\n<blockquote>\n<p>🔖 “A closure is the combination of a function and the lexical environment within which that function was declared.”</p>\n</blockquote>\n<p>클로저는 함수와 그 함수가 선언됐을 때의 렉시컬 환경(Lexical environment)과의 조합이다.</p>","frontmatter":{"title":"고차 함수","date":"February 23, 2025","description":"Javascript에 빠질 수 없는 개념인 고차 함수에 대해"}},"previous":{"fields":{"slug":"/closure/"},"frontmatter":{"title":"Closure"}},"next":{"fields":{"slug":"/webserver/"},"frontmatter":{"title":"웹서버"}}},"pageContext":{"id":"40ae2dcd-4a7c-50d5-b074-c4b48c5f3d81","previousPostId":"7814bdd0-08d7-56b8-a228-de5a6c8a7474","nextPostId":"fb85b0c2-668e-5faa-a7cf-93092377ecdf"}},"staticQueryHashes":["1469588348","2841359383"],"slicesMap":{}}