{"componentChunkName":"component---src-templates-blog-post-js","path":"/reactState/","result":{"data":{"site":{"siteMetadata":{"title":"neekoblog"}},"markdownRemark":{"id":"d5326473-6fa9-5bc3-a993-add96044af10","excerpt":"📚 Intro batchingUpdate에 대해 공부하기 전에 State의 동작원리에 대해 더 자세히 알아봐야 겠다고 생각했다.\n공식문서를 보니 state동작에 대한 얘기가 많아서 이것부터 파해쳐보자 ❤️ State 업데이트 큐 를 여러번 하면 한번만 실행된다. setState…","html":"<h3>📚 Intro</h3>\n<p>batchingUpdate에 대해 공부하기 전에 State의 동작원리에 대해 더 자세히 알아봐야 겠다고 생각했다.\n공식문서를 보니 state동작에 대한 얘기가 많아서 이것부터 파해쳐보자</p>\n<hr>\n<h3>❤️ State 업데이트 큐</h3>\n<p><code class=\"language-text\">setState</code>를 여러번 하면 한번만 실행된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 이런 방식으로 연속적인 setState를 호출하면</span>\n<span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0 -> 1</span>\n<span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0 -> 1 (여전히 count는 0)</span>\n<span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0 -> 1 (여전히 count는 0)</span></code></pre></div>\n<p>setState는 변수를 설정하면 렌더링 큐에 들어가는 것이지 바로 바뀌지 않는다.<br/>\n그래서 다음 렌더링을 큐에 넣기 전에 작업을 더 해야되는 경우가 생긴다.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">//이전 값 사용한 예시</span>\n<span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> next <span class=\"token operator\">=</span> prev <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n  <span class=\"token comment\">// 여기서 여러 작업 가능</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"다음 값은:\"</span><span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> next\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>그럴때 위처럼 작업하면 되는데 이를 updater function이라고 부른다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">//이전 값 여러번 사용한 예시</span>\n<span class=\"token function\">setNumber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">setNumber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">setNumber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이런 코드가 있으면 처음 n이 0이라고 할 때 함수 각각 하나씩 큐에 추가가 된다.<br/>\n그리고 렌더링중에 이 함수들이 실행되는 흐름은<br/>\nn=0 -> n=1 -> n=2 -> n=3 이렇게 된다.</p>\n<p>각 렌더링의 state 값은 고정되어있다.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">//state 교체 개념</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setNumber</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setNumber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>위와 같이 하면 처음 number는 사용되지 않는다. 교체되는 개념이다.\n조금 더 확실히 하면</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setNumber</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setNumber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setNumber</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>이렇게 했을 때 결과가 42가 된다.</p>","frontmatter":{"title":"react의 상태(State)에 대해","date":"October 02, 2024","description":"react에는 Global, Local, Cross Component State가 있다고 한다."}},"previous":{"fields":{"slug":"/this/"},"frontmatter":{"title":"this"}},"next":{"fields":{"slug":"/http/"},"frontmatter":{"title":"HTTP 개요 및 기초 이해"}}},"pageContext":{"id":"d5326473-6fa9-5bc3-a993-add96044af10","previousPostId":"27d364bd-fbad-5f12-bb3e-00944c9a94bf","nextPostId":"c82ed015-7046-540a-a40d-dacd47bb15aa"}},"staticQueryHashes":["1469588348","2841359383"],"slicesMap":{}}