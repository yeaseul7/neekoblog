{"componentChunkName":"component---src-templates-blog-post-js","path":"/threeJs1/","result":{"data":{"site":{"siteMetadata":{"title":"neekoblog"}},"markdownRemark":{"id":"c239e9fb-2c39-5346-a8ec-ca0a84f5e852","excerpt":"시작하기 전에 Three.js는 브라우저 환경에서만 동작하는 라이브러리이다.\n근데 SSR로 구성된 gatsby에 붙이고자 함은 window객체나 document 객체를 사용하는 것이므로 문제가 될 수 있다. 왜 문제가 될까? SSR은 서버에서 HTML…","html":"<h3>시작하기 전에</h3>\n<p>Three.js는 브라우저 환경에서만 동작하는 라이브러리이다.\n근데 SSR로 구성된 gatsby에 붙이고자 함은 window객체나 document 객체를 사용하는 것이므로 문제가 될 수 있다.</p>\n<p><strong>왜 문제가 될까?</strong></p>\n<p>SSR은 서버에서 HTML을 생성한 후에 브라우저에 전달하기 때문에 document 객체나 window 객체가 없다.\nGatsby의 경우 build시에 이 과정을 수행하기 떄문에 빌드 자체가 깨질 수 있다.\n이로 인해 렌더링의 차이가 있을 수 있어서 Hydration 오류를 야기할 가능성도 있다.</p>\n<p><strong>해결 방법</strong></p>\n<ol>\n<li>브라우저 객체를 직접 참조하지 않는다.</li>\n<li>useEffect 훅을 사용하여 브라우저 객체를 참조한다.</li>\n<li>브라우저 객체가 존재하는지 항상 확인한다.</li>\n<li>dynamic import를 사용하여 브라우저 객체를 참조한다.</li>\n</ol>\n<hr>\n<h3>1. Three.js 설치</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># three.js</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">--save</span> three</code></pre></div>\n<p><a href=\"https://threejs.org/docs/#manual/en/introduction/Installation\">설치 가이드</a></p>\n<p>나는 이미 gatsby에서 빌드하고 있기 때문에 Vite는 별도로 설치하지 않았다.</p>\n<h3>2. sence 만들기</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">THREE</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"three\"</span>\n\n<span class=\"token keyword\">const</span> scene <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Scene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> camera <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>PerspectiveCamera</span><span class=\"token punctuation\">(</span>\n  <span class=\"token number\">75</span><span class=\"token punctuation\">,</span>\n  window<span class=\"token punctuation\">.</span>innerWidth <span class=\"token operator\">/</span> window<span class=\"token punctuation\">.</span>innerHeight<span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">1000</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> renderer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>WebGLRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nrenderer<span class=\"token punctuation\">.</span><span class=\"token function\">setSize</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">.</span>innerHeight<span class=\"token punctuation\">)</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>renderer<span class=\"token punctuation\">.</span>domElement<span class=\"token punctuation\">)</span></code></pre></div>\n<p>three.js로 표시하기 위해서는 <strong>장면(scene)</strong>, <strong>카메라(camera)</strong>, <strong>렌더러(renderer)</strong> 가 필요하다.</p>\n<p>카메라는 세가지 종류가 있지만 시작 단계에서는 'PerspectiveCamera'를 사용한다.</p>\n<p>PerspectiveCamera안에 있는 속성의 의미를 살펴보자.</p>\n<ul>\n<li>fov: 시야각 (화면의 범위 / field of view)</li>\n<li>aspect: 종횡비 (화면의 너비 / 높이 => 이렇게 설정하지 않으면 깨질 수 있음)</li>\n<li>near: 가까운 거리 (카메라가 렌더링을 시작하는 최소 거리)</li>\n<li>far: 먼 거리 (카메라가 렌더링하는 최대 거리)</li>\n</ul>\n<p>near와 far 사이의 공간만 렌더링되며, 이 범위를 벗어난 객체들은 화면에 표시되지 않는다.\n지금 단계에서는 크게 신경 쓸 필요는 없지만, 나중에 애플리케이션의 성능 최적화를 위해 이 값들을 조정할 수 있다.</p>\n<p>다음은 렌더러를 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> renderer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>WebGLRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nrenderer<span class=\"token punctuation\">.</span><span class=\"token function\">setSize</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">.</span>innerHeight<span class=\"token punctuation\">)</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>renderer<span class=\"token punctuation\">.</span>domElement<span class=\"token punctuation\">)</span></code></pre></div>\n<p>const renderer라고 렌더러 인스턴스를 만들었는데 이외에 앱을 렌더링할 크기를 설정해야한다.</p>\n<p>근데 여기서 위에서 말했던 내 환경 gatsby에 대해 다시 생각해보자.\nwindow 객체에 직접 접근하면 안된다는 말을 떠올리면 해당 코드를 useEffect 훅 안에 넣어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ThreeScene</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> containerRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> scene <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Scene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> camera <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>PerspectiveCamera</span><span class=\"token punctuation\">(</span>\n      <span class=\"token number\">75</span><span class=\"token punctuation\">,</span>\n      window<span class=\"token punctuation\">.</span>innerWidth <span class=\"token operator\">/</span> window<span class=\"token punctuation\">.</span>innerHeight<span class=\"token punctuation\">,</span>\n      <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token number\">1000</span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> renderer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>WebGLRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    renderer<span class=\"token punctuation\">.</span><span class=\"token function\">setSize</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">.</span>innerHeight<span class=\"token punctuation\">)</span>\n    containerRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>renderer<span class=\"token punctuation\">.</span>domElement<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 컴포넌트가 언마운트될 때 정리</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      containerRef<span class=\"token punctuation\">.</span>current<span class=\"token operator\">?.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>renderer<span class=\"token punctuation\">.</span>domElement<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>containerRef<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>따라서 나는 위와 같이 작성했다.\nsetSize에서 설정한 앱의 크기를 유지하면서 해상도를 조절하기 위해서는 setSize에 false as updateStyle(세 번째 인수)를 넣어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">renderer<span class=\"token punctuation\">.</span><span class=\"token function\">setSize</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">.</span>innerHeight<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위와 같이 하면 렌더링 해상도만 지정된 크기로 유지되고 안에 있는 요소들은 css를 통해 별도로 지정해줘야 한다.</p>\n<h3>3. cube 만들기</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> geometry <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>BoxGeometry</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> material <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>MeshBasicMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token number\">0x00ff00</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> cube <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Mesh</span><span class=\"token punctuation\">(</span>geometry<span class=\"token punctuation\">,</span> material<span class=\"token punctuation\">)</span>\nscene<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>cube<span class=\"token punctuation\">)</span>\n\ncamera<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> <span class=\"token number\">5</span></code></pre></div>\n<p>큐브를</p>","frontmatter":{"title":"Three.js 블로그에 붙이기 1탄","date":"February 02, 2025","description":"Three.js 블로그에 붙이기 1탄"}},"previous":{"fields":{"slug":"/cdn/"},"frontmatter":{"title":"CDN이란?"}},"next":{"fields":{"slug":"/dogaiSerise1/"},"frontmatter":{"title":"강아지 ai 봇 만들기 1탄"}}},"pageContext":{"id":"c239e9fb-2c39-5346-a8ec-ca0a84f5e852","previousPostId":"a5f33161-de3a-5445-b65c-fa8e5d6cc7bf","nextPostId":"687e4e45-a60f-5dfc-8465-6a7733d33b37"}},"staticQueryHashes":["2841359383","3814644374"],"slicesMap":{}}